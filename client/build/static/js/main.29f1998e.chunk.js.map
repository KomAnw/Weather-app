{"version":3,"sources":["images/cloud.svg","Components/Main/Main.js","Components/MainBoard/MainBoard.js","Components/OtherBoards/OtherBoards.js","Components/Forecast/Forecast.js","Components/Description/Description.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","className","src","require","alt","MainBoard","props","data","parent","title","consolidated_weather","applicable_date","split","reverse","join","weather_state_name","Math","round","the_temp","weather_state_abbr","max_temp","min_temp","wind_speed","wind_direction","OtherBoards","listItem","map","item","ind","key","id","Forecast","Description","App","useState","click","setClick","setData","useEffect","navigator","geolocation","getCurrentPosition","position","latt","coords","latitude","long","longitude","fetch","then","res","json","onClick","event","target","style","display","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29f1998e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.7ee70f9f.svg\";","import React from 'react';\r\n\r\nimport './Main.css'\r\n\r\nexport default function Main() {\r\n  \r\n  return (\r\n    <div className=\"main\">\r\n        <img className=\"cloud\" src={require('../../images/cloud.svg')} alt=\"Weathe icon\" />\r\n        <h1 className=\"main__title\">Weather application</h1>\r\n      </div>\r\n  );\r\n}","import React from \"react\";\r\nimport './MainBoard.css'\r\n\r\nexport default function MainBoard(props) {\r\n  return (\r\n    <div className=\"mainborad\">\r\n      <div className=\"mainborad__container\">\r\n          <div className=\"mainborad__left\">\r\n            <div className=\"mainborad__left-top\">\r\n                <h2 className=\"mainborad__titile\">{props.data.parent.title}, {props.data.title}</h2>\r\n                <p className=\"mainborad__date\">{props.data.consolidated_weather[0].applicable_date.split(\"-\").reverse().join(\"-\")}, {props.data.consolidated_weather[0].weather_state_name}</p>\r\n            </div>\r\n            <div className=\"mainborad__left-bottom\">\r\n                <h3 className=\"mainborad__degrees\">{Math.round(props.data.consolidated_weather[0].the_temp)}&#176;</h3>\r\n            </div>\r\n          </div>\r\n          <img\r\n            alt=\"weather icon\"\r\n            src={`https://www.metaweather.com/static/img/weather/${props.data.consolidated_weather[0].weather_state_abbr}.svg`}\r\n            className=\"mainborad__img\"/>\r\n      </div>\r\n      <ul className=\"mainborad__bottom-container\">\r\n            <li className=\"mainborad__bottom-data \">Minimum temperature <p className='mainborad__item max-temp'>{Math.round(props.data.consolidated_weather[0].max_temp)}&#176;</p></li>\r\n            <li className=\"mainborad__bottom-data \">Maximum temperature <p className='mainborad__item min-temp'>{Math.round(props.data.consolidated_weather[0].min_temp)}&#176;</p></li>\r\n            <li className=\"mainborad__bottom-data \">Wind speed <p className='mainborad__item wind-speed'>{Math.round(props.data.consolidated_weather[0].wind_speed)} m/s</p></li>\r\n            <li className=\"mainborad__bottom-data \">Wind direction <p className='mainborad__item wind-dir'>{Math.round(props.data.consolidated_weather[0].wind_direction)}&#176;</p></li>\r\n        </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport './OtherBoards.css'\r\n\r\nexport default function OtherBoards(props) {\r\n\r\n  const listItem = props.data.consolidated_weather.map((item, ind)=>{\r\n      if(ind>0){\r\n          return(\r\n            <div key={item.id} className='card'>\r\n                <div className=\"card__main-info\">\r\n                    <img className=\"card_img\" alt=\"weather icon\" src={`https://www.metaweather.com/static/img/weather/${item.weather_state_abbr}.svg`}/>\r\n                    <h2 className=\"card__deg\">{Math.round(item.the_temp)}&#176;</h2>\r\n                    <p className=\"card__date\">{item.applicable_date.split(\"-\").reverse().join(\"-\")}</p>\r\n                </div>\r\n                <div className=\"card__other-info\">\r\n                    <p className=\"card__item\">Minimum temperature&nbsp;<span className=\"card__itwm-bold\">{Math.round(item.min_temp)}&#176;</span></p>\r\n                    <p className=\"card__item\">Maximum temperature&nbsp;<span className=\"card__itwm-bold\">{Math.round(item.max_temp)}&#176;</span></p>\r\n                    <p className=\"card__item\">Wind speed&nbsp;<span className=\"card__itwm-bold\">{Math.round(item.wind_direction)}&#176;</span></p>\r\n                    <p className=\"card__item\">Wind direction&nbsp;<span className=\"card__itwm-bold\">{Math.round(item.wind_speed)}m/s</span></p>\r\n                </div>\r\n            </div>\r\n          )\r\n      }\r\n  })\r\n\r\n\r\n  return (\r\n    <div className=\"OtherBoards\">\r\n        {listItem}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport MainBoard from \"../MainBoard/MainBoard\"\r\nimport OtherBoards from \"../OtherBoards/OtherBoards\"\r\n\r\nexport default function Forecast(props) {\r\n  return (\r\n    <div className=\"Forecast\">\r\n      <MainBoard data={props.data}/>\r\n      <OtherBoards data={props.data}/>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Description.css\";\r\n\r\nexport default function Description() {\r\n  return (\r\n    <p className=\"description\">\r\n      This is an application that will show you a weather summary according to\r\n      your geolocation\r\n    </p>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport Main from \"./Components/Main/Main\";\nimport Forecast from \"./Components/Forecast/Forecast\";\nimport \"./App.css\";\nimport Description from \"./Components/Description/Description\";\n\nexport default function App() {\n  const [click, setClick] = useState(false);\n  const [data, setData] = useState(false);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const latt = position.coords.latitude;\n      const long = position.coords.longitude;\n      fetch(`http://localhost:3001/weather/${latt},${long}`)\n        .then((res) => res.json())\n        .then((data) => setData(data));\n    });\n  }, []);\n\n  function clicked(event) {\n    event.target.style.display = \"none\";\n    setClick(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <Main />\n      {click ? <Forecast data={data} /> : <Description />}\n      <button className=\"Button\" onClick={clicked}>\n        Get weather forecast\n      </button>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}